{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "052db1f1_337c14d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "typo: extensions (also appear below and in the ADR)",
      "range": {
        "startLine": 11,
        "startChar": 60,
        "endLine": 11,
        "endChar": 70
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "617402ff_7097a71d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-28T10:42:01Z",
      "side": 1,
      "message": "typo: such as",
      "range": {
        "startLine": 11,
        "startChar": 20,
        "endLine": 11,
        "endChar": 25
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd461a1_499620e1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-28T10:42:01Z",
      "side": 1,
      "message": "question: Is it really considered an extension ? It does not add or remove anything, but is rather a different way to iterate through entries",
      "range": {
        "startLine": 29,
        "startChar": 24,
        "endLine": 29,
        "endChar": 32
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "915b3fec_300daafd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-28T10:42:01Z",
      "side": 1,
      "message": "suggest: `Once this is implemented, librobinhood will have the backends posix, mpi-file, hestia and mongo, and the extensions lustre and retention`",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 44
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d70db6f_087f00de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-28T12:14:35Z",
      "side": 1,
      "message": "Yes, I would really like to have a mpi-file iterator as an extension. The issue with this is that the mpi-file backend implements rbh-find\u0027s filter. Which the posix backend does not. I will try to see if it can still be implemented as an extension. But for now, I will simply let it be. Currently, the iterator part of lustre-mpi, posix-mpi and mpi-file are all implemented in iter_mpi.c.",
      "parentUuid": "6bd461a1_499620e1",
      "range": {
        "startLine": 29,
        "startChar": 24,
        "endLine": 29,
        "endChar": 32
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8b54072_f5bbb738",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-29T09:07:28Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0d70db6f_087f00de",
      "range": {
        "startLine": 29,
        "startChar": 24,
        "endLine": 29,
        "endChar": 32
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3ba78b_3e02f23e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "Great job!",
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bab27ff_0d939b69",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "comment: well, that\u0027s right for POSIX-like backends, but how do you manage the mongo one? will you consider two kinds of backends, some that are implemented as full backends and some that are a combination of iterator/enricher(/extensionS)?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "255d3360_436d0c37",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "Extensions are specific to a backend. I can write an extension for any backend if I want. But ultimately, it is up to the backend to decide if they want to load extensions or not. Right now, I don\u0027t see a use case for having extensions to the mongo backend. So we won\u0027t have any. I think extensions will only ever be used by POSIX. I don\u0027t see other use cases at the moment. But their isn\u0027t much difference in having generic extensions vs POSIX specific extensions code wise. So I went with the generic approach.\n\nThe way I see it is that an extension cannot be loaded by any backend. Just the one it extends. Which is why the name of the \"base\" backend is embedded in the symbol exported by the extension. So the notion of iterator and enricher are specific to POSIX because they will only be used by extensions of the POSIX backend.\n\nIn short, mongo won\u0027t change, only POSIX (and its derivatives).",
      "parentUuid": "3bab27ff_0d939b69",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e34331ed_45174ce8",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Ok, I think I misunderstood the PoV. Mainly because it was discussed, maybe only in the first talks about refactoring backends, that every backend will need to browse file/object system, and enrich them (Hestia do that for instance, kind of different with Mongo, I agree). So I thought you proposed to split every backend like that.\n\nBut no, you only want to let anyone overload/extend any part of any backend. As here, you care about the POSIX backend, you extent for both the iterator and the enricher, because those are our use cases. And in the future, we may have other kind of extensions. I think I get it now.\n\nThe need of \"genericity\" of an extension i.e. its ability to extend any backend, is not a requirement for now.",
      "parentUuid": "255d3360_436d0c37",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 6
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3167c0c3_a5792ffb",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "comment: maybe you can add this in the example",
      "range": {
        "startLine": 54,
        "startChar": 23,
        "endLine": 54,
        "endChar": 62
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe2c5bc8_f6b1796e",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "This is the example below. The behavior is copied from the current behavior of backends. I just used a different symbol to specify that this is an extension, not a full backend.",
      "parentUuid": "3167c0c3_a5792ffb",
      "range": {
        "startLine": 54,
        "startChar": 23,
        "endLine": 54,
        "endChar": 62
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef577236_89566f94",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "fe2c5bc8_f6b1796e",
      "range": {
        "startLine": 54,
        "startChar": 23,
        "endLine": 54,
        "endChar": 62
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1cb4b32_ccbae17b",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "question: can you explain that? did you mean liborobinhood backend?",
      "range": {
        "startLine": 56,
        "startChar": 26,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d006c33_255b0184",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "No, I mean that functions in librobinhood that deal with the content of an extension will not know its type. For instance, the function that loads an extension will have this signature:\n\n```\nvoid *\nrbh_plugin_load_extension(...);\n```\n\nWhere as the function that loads a backend is like this:\n```\nstruct rbh_backend *\nrbh_backed_plugin_import(...);\n```\n\nlibrobinhood knows that a backend contains the definition of a struct rbh_backend. For extensions, librobinhood doesn\u0027t know the type returned by `rbh_backend_load_extension` since the type is backend specific.",
      "parentUuid": "b1cb4b32_ccbae17b",
      "range": {
        "startLine": 56,
        "startChar": 26,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c2776cb_d5c4256f",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Okay, that seems logical.",
      "parentUuid": "5d006c33_255b0184",
      "range": {
        "startLine": 56,
        "startChar": 26,
        "endLine": 56,
        "endChar": 65
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "248371f6_d5a8ba29",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "question: I\u0027m not familiar with this kind of expression, is it valid? if so, what does it mean?",
      "range": {
        "startLine": 65,
        "startChar": 3,
        "endLine": 65,
        "endChar": 64
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "462cab77_1d1aa1e7",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "It expands to the symbol `_RBH_POSIX_LUSTRE_PLUGIN_EXTENSION`. This is copied from the implementation of backends.",
      "parentUuid": "248371f6_d5a8ba29",
      "range": {
        "startLine": 65,
        "startChar": 3,
        "endLine": 65,
        "endChar": 64
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc03d662_787231a1",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "I didn\u0027t even know it was there (or it was too long ago).",
      "parentUuid": "462cab77_1d1aa1e7",
      "range": {
        "startLine": 65,
        "startChar": 3,
        "endLine": 65,
        "endChar": 64
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e28c9a0_1bc43e77",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "typo: extensions",
      "range": {
        "startLine": 83,
        "startChar": 6,
        "endLine": 83,
        "endChar": 15
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7316faf9_c45deaf6",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "suggest: as posix is an enricher, maybe I would prefer something like that:\n\n```yaml\n    lustre:\n        iterator: fts\n        enricher: posix\n        extensions:\n            - lustre\n            - retention\n```",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc7289f_9130684c",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "The extends keyword means \"when I say `lustre`, load `posix`\". This has nothing to do with the behavior of the POSIX backend. If someday we find a use case for extensions to the mongo backend for instance, we would write:\n\n```\nmybackend:\n    extends: mongo\n    someparam: somevalue\n```\n\n`someparam` and `somevalue` would be something that only the mongo backend would understand. And it may not use the `iterator` or `enrichers` keys that the POSIX backend use.",
      "parentUuid": "7316faf9_c45deaf6",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a72ef76_101dac55",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Ok, so every backend may propose a way to extend them using the configuration file.\n\nSomething that is not consistent though: `iterator` is a replacement keyword and `enrichers` is an addition keyword. But because every backend has its own implementation, it can specify the difference...",
      "parentUuid": "4dc7289f_9130684c",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "959f56ca_6aa7278a",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T12:08:10Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the issue with iterator and enrichers. Since there is only one iterator, it makes sense to me that it replaces the default one. Maybe what isn\u0027t clear in this document is that in practice, the struct `rbh_posix_extension` will contain function pointers depending on what behavior they implement. For instance:\n\n``` c\n// librobinhood/src/backends/retention/plugin.c\nstruct rbh_posix_extension RBH_PLUGING_EXTENDS(POSIX, RETENTION) \u003d {\n    // ...\n    .enrich \u003d rbh_posix_retention_enrich,\n};\n\n// librobinhood/src/backends/lustre/plugin.c\nstruct rbh_posix_extension RBH_PLUGIN_EXTENDS(POSIX, LUSTRE) \u003d {\n    // ...\n    .enrich \u003d rbh_posix_lustre_enrich,\n};\n\n// librobinhood/src/backends/mfu/plugin.c\nstruct rbh_posix_extentsion RBH_PLUGIN_EXTENDS(POSIX, MFU) \u003d {\n    // ...\n    .iter_new \u003d rbh_posix_mfu_iter_new,\n};\n```\n\nSo when the POSIX backend loads the extension specified in the iterator key, it expects it to contain a non-NULL iter_new pointer. And the same goes for the enrich function and the enrichers key. Which means that in theory, we could implement an extension that would provide both an iterator and an enricher. Although I\u0027m not sure this would be useful in practice.\n\nI didn\u0027t explain the implementation details of enrichers and iterators in this document because the goal is to see whether the idea of having extensions is acceptable to everyone. The fact that the document describes the posix backend in the beginning is just to provide a justification for this feature. Then when I push the implementation of posix extensions we will discuss the actual code.\n\nMy goal with this document is to see if the feature is interesting and what the configuration would look like. The POSIX backend here is just a means to provide example use cases.",
      "parentUuid": "8a72ef76_101dac55",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12164b82_0fd7be30",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T12:40:18Z",
      "side": 1,
      "message": "My last sentence may be misinterpreted. It was just saying that every backend can be extended the way it was desired, we are not forced to have the same kind of mechanism (replacement vs. addition) between the keywords. So I am ok with what you propose here.\n\nMy point was around what you just said:\n\n\u003e Since there is only one iterator, it makes sense to me that it replaces the default one.\n\nI agree, even if (as discussed in the other comment) the `enrichers` keyword could also mean \"I replace the default one with the following enrichers\". And I am not sure this will be the case for every person that will configure RBH.\n\nBut we can easily clear all doubts with the backend extension documentation.",
      "parentUuid": "959f56ca_6aa7278a",
      "range": {
        "startLine": 91,
        "startChar": 11,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "795b1158_7a429ac9",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-28T10:42:01Z",
      "side": 1,
      "message": "question: to be sure I understand everything correctly.\n\nHere you declare a backend called \"lustre\", it can be used in the URI for commands. \n\nIt extends \"posix\", but is \"posix\" here a backend that could be inside this very same list of backends, or the base default one ?\n\nIt uses the iterator \"fts\", does that mean the \"posix\" backend doesn\u0027t rely on fts by default anymore, and these backends HAVE to specify an iterator to use ?\nIf posix uses fts by default, and the backend (here \"lustre\") specifies another iterator, it replaces the default one, so we assume that the extended backends can be used with this new iterator ?\n\nThe enrichers are the extensions you speak of, which will be loaded, but there is no correlation between the name of an extension and the name of a backend, i.e. the \"lustre\" of line 90 is not linked to the \"lustre\" of line 94, they just happen to use the same name ?",
      "range": {
        "startLine": 90,
        "startChar": 7,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27cd1e66_877e3c5a",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-28T12:14:35Z",
      "side": 1,
      "message": "\u003e Here you declare a backend called \"lustre\", it can be used in the URI for commands. \n\nYes\n\n\u003e It extends \"posix\", but is \"posix\" here a backend that could be inside this very same list of backends, or the base default one ?\n\nYes, posix can be inside the list of backends. For instance, if we want to use retention:\n```\nbackends:\n    posix:\n        extends: posix\n        enrichers:\n            - retention\n```\n\u003e It uses the iterator \"fts\", does that mean the \"posix\" backend doesn\u0027t rely on fts by default anymore, and these backends HAVE to specify an iterator to use ?\n\nNo, fts is not necessary. The iterators key can be omitted if we want to use FTS.\nThe code for the FTS iterator will still be in the posix iterator. It will just be reorganized to make it more explicit.\n\n\u003e If posix uses fts by default, and the backend (here \"lustre\") specifies another iterator, it replaces the default one, so we assume that the extended backends can be used with this new iterator ?\n\nYes, the assumption is that an extension is specific to a backend. So if the lustre extension extends the posix backend, then it can be used. Lets say that I have a phobos iterator for instance. There is no reason that this iterator should extend the posix backend. So POSIX won\u0027t even be able to load this phobos extension.\n\n\u003e The enrichers are the extensions you speak of, which will be loaded, but there is no correlation between the name of an extension and the name of a backend, i.e. the \"lustre\" of line 90 is not linked to the \"lustre\" of line 94, they just happen to use the same name ?\n\nYes, the name of the custom backend can be anything we want and it has no link with the actual backends (e.g. `librbh-posix.so`) and extensions (e.g. `librbh-posix-lustre-ext.so`).",
      "parentUuid": "795b1158_7a429ac9",
      "range": {
        "startLine": 90,
        "startChar": 7,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f709889c_19f3af5f",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1019048
      },
      "writtenOn": "2025-01-29T09:07:28Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "27cd1e66_877e3c5a",
      "range": {
        "startLine": 90,
        "startChar": 7,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6ebf7ad_003a3663",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "question: as extensions are backend specific, is it mandatory to indicate the base enricher?",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 18
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fef57bb_86ba3019",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "Yes, otherwise you don\u0027t know which backend to load when you see a URI like this: `rbh:lustre-mpi:/mnt/lustre`. Also, the notion of enricher is (at least for now) specific to POSIX in this document. If one day we have a use case for mongo extensions, it may not use the notion of enricher at all. So posix here does not mean enricher. It means backend. I could have made some more \"extreme\" (but utimately pointless) where the posix enrichement is itself an extension to the posix backend. So we would have something like this:\n\n```\nbackends:\n    mybackend:\n        extends: posix\n        enrichers:\n            - posix\n            - retention\n    myweirdbackend:\n        extends: posix\n        enrichers:\n            - retention \u003c- retention only, no statx, xattrs...\n```\n\nIn this example, extends means \"load posix\". But the posix in the enrichers section tells the posix backend that it should load the posix extension.",
      "parentUuid": "e6ebf7ad_003a3663",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 18
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83f547c6_41d89a04",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Yeah, that may be extreme, but more understandable in a way? Well, the backend defines what it wants, so it may not be an issue, as I said earlier.\n\n\u003e If you want to implement a POSIX backend extension for the enricher, notice that the POSIX enrichment is always done.",
      "parentUuid": "2fef57bb_86ba3019",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 18
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "246749d7_c0fa239c",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T12:08:10Z",
      "side": 1,
      "message": "Maybe someday we will want to implement a tool that traverses a posix filesystem but doesn\u0027t do any enrichement or just the retention for example. There already the `struct rbh_filter_projection` for this. I don\u0027t have a strong objection to export the POSIX enrichment in a POSIX extension that would always be loaded and may be deactivated through the config. But I\u0027m not going to implement that for now.",
      "parentUuid": "83f547c6_41d89a04",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 18
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a1e85b2_217c1d51",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T12:40:18Z",
      "side": 1,
      "message": "I agree, this is not needed for now. And I accepted the fact that a backend lets itself be extended the way it intended.",
      "parentUuid": "246749d7_c0fa239c",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 18
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4bec6c2_da36d969",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1037727
      },
      "writtenOn": "2025-01-28T10:34:31Z",
      "side": 1,
      "message": "question: As you said the posix-mpi and lustre-mpi backends will disapeared but if no backend is specified in the conf, it will be still possible to do something like that: `rbh-sync rbh:lustre-mpi:...` ?",
      "range": {
        "startLine": 108,
        "startChar": 5,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0884c7aa_f4d14971",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-28T10:43:53Z",
      "side": 1,
      "message": "The goal is that extensions will replace the lustre, lustre-mpi and posix-mpi backends. My plan was to simply remove the backends once extensions are implemented. Maybe we could hardcode some default backends.\n\nThe way I have implemented this is that `rbh_posix_backend_new` has a new argument named `type` that contains the custom backend name given in the URI. So for the URI `rbh:lustre-mpi:/mnt/lustre`, it would be `lustre-mpi`. With this, the posix backend can lookup which extensions should be loaded inside the config.\n\nI can hardcode the values lustre-mpi, posix-mpi and lustre to match their current behavior. So that, without config, we keep the current behavior. So the posix backend would first look for `lustre-mpi` inside the config. If not found, default to loading the `mfu` iterator and `lustre` enricher if the extensions are installed.",
      "parentUuid": "e4bec6c2_da36d969",
      "range": {
        "startLine": 108,
        "startChar": 5,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d49a961b_061c5a54",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1037727
      },
      "writtenOn": "2025-01-29T09:24:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0884c7aa_f4d14971",
      "range": {
        "startLine": 108,
        "startChar": 5,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2be6cf0c_4f859a38",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T08:24:16Z",
      "side": 1,
      "message": "question: I do not know if this is relevant, or just not considered, but why not separate the FTS iterator and the POSIX enricher from the POSIX backend? and maybe load a FTS iterator as a default one?\n\nThen we may propose some default backends like POSIX as a POSIX enricher and a FTS iterator.",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 119,
        "endChar": 33
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeae606f_9f99869f",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2025-01-23T08:58:45Z",
      "side": 1,
      "message": "The reason I did not do it is because I don\u0027t see a reason to make it dynamically loadable. If we want to make it the default anyway, we might as well keep it in the backend. And if we want to change the default we can still do something like this:\n\n```\nbackends:\n    posix:\n        extends: posix\n        iterator: mfu\n```",
      "parentUuid": "2be6cf0c_4f859a38",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 119,
        "endChar": 33
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "822449a3_45aafc40",
        "filename": "librobinhood/doc/enrichers_and_iterators.rst",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2025-01-23T09:58:31Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "aeae606f_9f99869f",
      "range": {
        "startLine": 117,
        "startChar": 40,
        "endLine": 119,
        "endChar": 33
      },
      "revId": "c0f85860f9990696792e288429e01203886973e5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}