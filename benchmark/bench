#!/bin/bash

function setup_changelog() {
    MDT=()
    userid=()
    for i in $(seq 0 $(($NB_MDT - 1))); do
        MDT+=(lustre-MDT000${i})
        userid+=("$(ssh ${MDS[$i]} lctl --device "lustre-MDT000${i}" \
                    changelog_register | cut -d "'" -f2)")
    done

    export MDT
    export userid
}

function cleanup_changelog() {
    for i in $(seq 0 $(($NB_MDT - 1))); do
        lfs changelog_clear "${MDT[$i]}" "${userid[$i]}" 0
    done
}

function setup_hsm() {
    ssh $CLIENT "mkdir -p /mnt/hsm"
    scp lhsmtool-posix.service $CLIENT:~/../etc/systemd/system

    lctl set_param mdt.*.hsm_control=enabled

    ssh $CLIENT "systemctl daemon-reload &&" \
                "systemctl enable lhsmtool-posix.service &&" \
                "systemctl start lhsmtool-posix.service"
}

function cleanup_lustre() {
    ssh $CLIENT "umount /mnt/lustre"
    /usr/lib64/lustre/tests/llmountcleanup.sh
}

function setup_lustre() {
    export CLIENTS=$CLIENT
    export MDSSIZE=26000000
    export MDSCOUNT=$NB_MDT
    export PDSH="pdsh -S -Rssh -w"
    for i in $(seq 1 $NB_MDT); do
        export "mds${i}_HOST"="${MDS[$(($i - 1))]}"
    done
    export OSTSIZE=50000000
    export OSTCOUNT=4

    /usr/lib64/lustre/tests/llmount.sh

    for i in $(seq 0 $(($NB_MDT - 1))); do
        lfs mkdir -m $i /mnt/lustre/mdt$i
    done
}

function cleanup_posix() {
    rm -rf /tmp/benchmark
}

function setup_posix() {
    mkdir /tmp/benchmark
}

function reset_mongo() {
    ssh $MONGO "kill $(sudo lsof -t -i:27017)"
    ssh $MONGO rm -rf /tmp/mongodb-27017.sock
    ssh $MONGO rm -f /var/lib/mongo/mongod.lock
    ssh $MONGO rm -f /var/run/mongodb/mongod.pid
    ssh $MONGO mkdir -p  /var/run/mongodb/
    ssh $MONGO touch /var/run/mongodb/mongod.pid
    ssh $MONGO chown -R  mongod:mongod /var/run/mongodb/
    ssh $MONGO chown mongod:mongod /var/run/mongodb/mongod.pid
}

function setup_mongo() {
    ssh $MONGO "sed -i -e 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/g'" \
               "/etc/mongod.conf"
    if ! ssh $MONGO "systemctl status mongod"; then
        reset_mongo
        ssh $MONGO "sudo systemctl start mongod"
    fi
}

function cleanup_mongo() {
    ssh $MONGO "mongo --quiet --eval 'var dbs = db.getMongo().getDBNames();"\
               "for(var i in dbs) { db = db.getMongo().getDB(dbs[i]);" \
               "db.dropDatabase(); }'"
    ssh $MONGO "systemctl stop mongod"
}

function drop_cache() {
    echo 3 > /proc/sys/vm/drop_caches
    # Drop MDS cache
    for host in ${MDS[@]}; do
        ssh $host "echo 3 > /proc/sys/vm/drop_caches"
    done

    # Drop CLIENTS cache
    ssh $CLIENT "echo 3 > /proc/sys/vm/drop_caches"

    # Drop MONGO cache
    ssh $MONGO "systemctl stop mongod && " \
               "echo 3 > /proc/sys/vm/drop_caches && " \
               "systemctl start mongod"
}

function reset_mongo_profiling() {
    local mongodb=$1

    mongo --quiet --host $MONGO $mongodb \
          --eval "db.setProfilingLevel(0)" > /dev/null
    mongo --quiet --host $MONGO $mongodb \
          --eval "db.system.profile.drop()" > /dev/null
    mongo --quiet --host $MONGO $mongodb \
          --eval "db.setProfilingLevel(1, { slowms: 0 });" > /dev/null
}

function getMongoAggregateTime() {
    local mongodb=$1

    mongo --quiet --host $MONGO $mongodb \
          --eval "db.system.profile.find({ op: 'command', 'command.aggregate': \
                  'entries' }, {'millis': true, 'nreturned': true})" |
                  tee result > /dev/null
    mongo --quiet --host $MONGO $mongodb \
          --eval "db.system.profile.find({ op: 'getmore', 'command.collection':\
                  'entries' }, {'millis': true, 'nreturned': \
                  true}).forEach(printjson)" |
                  tee -a result > /dev/null
    echo "Time in ms of Mongo for an aggregate:"
    echo "$(awk -F'"millis" :' '{ sum += $2 } END { print sum }' result)"
}

function setup_tree() {
    local options=$1
    local need_to_sync=$2
    local root=$3
    local backend=$4
    local mongodb=$5

    ./generate_tree $options
    if [[ "$need_to_sync" == "true" ]]; then
        module load mpi/openmpi-x86_64
        time mpirun --allow-run-as-root rbh-sync \
             rbh:$backend-mpi:$root rbh:mongo:$mongodb
        mongo --quiet --host $MONGO $mongodb --eval "db.entries.count()"
    fi
}

function cleanup_tree() {
    local root=$1

    module load mpi/openmpi-x86_64
    for i in $(seq 0 $(($NB_MDT - 1))); do
        mpirun --allow-run-as-root drm -q $root/mdt$i/
        if [[ $FS == "lustre" ]]; then
            lfs mkdir -m $i $root/mdt$i
        fi
    done
}

function setup() {
    if [[ $FS == "lustre" ]]; then
        setup_lustre
        export ROOT="/mnt/lustre"
    else
        setup_posix
        export ROOT="/tmp/benchmark"
    fi

    cleanup_mongo
    setup_mongo

    ssh $CLIENT "sed -i -e 's/localhost/$MONGO/g' \
                 /etc/robinhood4.d/default.yaml"
}

function bench_sync() {
    local root=$1
    local backend=$2

    echo "Sequential"
    drop_cache
    ssh $CLIENT "time rbh-sync rbh:$backend:$root rbh:mongo:sync-$backend"
    ssh $CLIENT "rbh-find rbh:mongo:sync-$backend -count"
    mongo --quiet --host $MONGO sync-$backend --eval "db.dropDatabase()"

    for i in 2 4 8 16 32 64 128 ; do
        echo "$i process"
        drop_cache
        ssh $CLIENT "module load mpi/openmpi-x86_64 && time mpirun" \
                     "--allow-run-as-root -np $i rbh-sync" \
                     "rbh:$backend-mpi:$root rbh:mongo:sync-$backend"
        ssh $CLIENT "rbh-find -c /etc/robinhood4.d/default.yaml" \
                     "rbh:mongo:sync-$backend -count"
        mongo --quiet --host $MONGO sync-$backend \
              --eval "db.dropDatabase()" > /dev/null
    done
}

function sync() {
    # SETUP SYNC
    setup

    setup_tree "-v -r $ROOT -n 6 -d 6 -m $NB_MDT $INODES"
    if [[ $FS == "lustre" ]]; then
        echo "LUSTRE"
        for i in {1..5}; do
            echo "Run n°$i"
            bench_sync $ROOT "lustre"
        done
    fi
    echo "POSIX"
    for i in {1..5}; do
        echo "Run n°$i"
        bench_sync $ROOT "posix"
    done

    cleanup_tree $ROOT
    cleanup_mongo

    if [[ "$FS" == "posix" ]]; then
        cleanup_posix
    else
        cleanup_lustre
    fi
}

function bench_find() {
    echo "Filter: $@"
    for i in {1..5}; do
        echo "Run n°$i"
        drop_cache
        reset_mongo_profiling "find"
        ssh $CLIENT "time rbh-find rbh:mongo:find $@"
        getMongoAggregateTime "find"
    done
}

function _find() {
    # SETUP FIND
    setup

    setup_tree "-v -r $ROOT -n 6 -d 6 -m $NB_MDT $INODES" "true" $ROOT "posix" \
        "find"

    bench_find "-count"
    bench_find "-type d -count"
    bench_find "-type f -count"
    bench_find "'(' '(' -type d -a -name *_1 ')' -o " \
               "'(' -type f -a -name *_10 ')' ')' -a -count"

    cleanup_tree $ROOT
    cleanup_mongo

    if [[ "$FS" == "posix" ]]; then
        cleanup_posix
    else
        cleanup_lustre
    fi
}

function exec_fsevents() {
    local enricher=$1

    for i in $(seq 0 $(($NB_MDT - 1))); do
        echo "Number of changelog: \
              $(ssh $CLIENT "lfs changelog ${MDT[$i]} | wc -l")"
        ssh $CLIENT "rbh-fsevents --enrich rbh:$enricher:$ROOT" \
                     "src:lustre:${MDT[$i]}?ack-user=${userid[$i]}" \
                     "rbh:mongo:fsevent" &
    done
    wait
}

function fsevents() {
    setup
    setup_changelog
    setup_hsm

    echo "With POSIX enricher"
    for i in {1..5}; do
        echo "Run n°$i"
        setup_tree "-v -r $ROOT -n 6 -d 6 -m $NB_MDT --changelog $INODES"
        echo "Number of inodes: $(find $ROOT | wc -l)"
        time exec_fsevents "posix"
        ssh $CLIENT "rbh-find rbh:mongo:fsevent -count"

        cleanup_tree $ROOT
        cleanup_changelog
        mongo --quiet --host $MONGO fsevent \
              --eval "db.dropDatabase()" > /dev/null
    done

    echo "With LUSTRE enricher"
    for i in {1..5}; do
        echo "Run n°$i"
        setup_tree "-v -r $ROOT -n 6 -d 6 -m $NB_MDT --changelog $INODES"
        echo "Number of inodes: $(find $ROOT | wc -l)"
        time exec_fsevents "lustre"
        ssh $CLIENT "rbh-find rbh:mongo:fsevent -count"

        cleanup_tree $ROOT
        cleanup_changelog
        mongo --quiet --host $MONGO fsevent \
              --eval "db.dropDatabase()" > /dev/null
    done

    cleanup_lustre
}

NB_MDT=1
FS="posix"
MONGO="$(hostname -s)"
MDS="$(hostname -s)"
CLIENT="$(hostname -s)"
INODES=1000

function usage() {
    echo "bench.sh [--fs FS_TYPE] [--mongo HOSTNAME] [--mds HOSTNAME[,HOSTNAME...]] [--client HOSTNAME] [--inodes NUM] BENCHMARK"
    echo ""
    echo "Run a Robinhood benchmark with the specified options."
    echo ""
    echo "Positional Argument:"
    echo "BENCHMARK"
    echo "The benchmark to run. Valid options: sync, find, fsevents."
    echo ""
    echo "Optional Arguments:"
    echo "--fs FS_TYPE: Filesystem type to use: lustre or posix. Default: posix."
    echo "--mongo HOSTNAME: Hostname of the MongoDB server. Default: localhost."
    echo "--mds HOSTNAME[,HOSTNAME...]: Comma-separated list of Metadata Server (MDS) hostnames. Only with Lustre."
    echo "--client HOSTNAME: Hostname where Robinhood should be launched."
    echo "--inodes NUM: Number of inodes to create. Default: 1000."
}

ARGUMENT_LIST=(
    "fs"
    "mongo"
    "mds"
    "client"
    "inodes"
)

opts=$(getopt \
    --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")help" \
    --name "$(basename "$0")" \
    --options "" \
    -- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
    case "$1" in
        --fs)
            FS=$2
            shift 2
            ;;

        --mongo)
            MONGO=$2
            shift 2
            ;;

        --mds)
            IFS=',' read -r -a MDS <<< "$2"
            NB_MDT=${#MDS[@]}
            shift 2
            ;;

        --client)
            CLIENT=$2
            shift 2
            ;;

        --help)
            usage
            exit
            ;;

        --inodes)
            INODES=$2
            shift 2
            ;;

        *)
            break
            ;;
    esac
done

shift 1
COMMAND=$1

case "$COMMAND" in
    sync)
        sync
        ;;

    find)
        _find
        ;;

    fsevents)
        if [[ $FS == "posix" ]]; then
            echo "Can only be used with Lustre, got $FS"
            exit
        fi
        fsevents
        ;;

    *)
        usage
        exit
        ;;
esac
