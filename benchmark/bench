#!/bin/bash

function cleanup_lustre() {
    ssh $CLIENT "umount /mnt/lustre"
    /usr/lib64/lustre/tests/llmountcleanup.sh
}

function setup_lustre() {
    export CLIENTS=$CLIENT
    export MDSSIZE=26000000
    export MDSCOUNT=$NB_MDT
    export PDSH="pdsh -S -Rssh -w"
    for i in $(seq 1 $NB_MDT); do
        export "mds${i}_HOST"="${MDS[$(($i - 1))]}"
    done
    export OSTSIZE=50000000
    export OSTCOUNT=4

    /usr/lib64/lustre/tests/llmount.sh

    for i in $(seq 0 $(($NB_MDT - 1))); do
        lfs mkdir -m $i /mnt/lustre/mdt$i
    done
}

function setup_posix() {
    mkdir /tmp/benchmark
}

function reset_mongo() {
    ssh $MONGO "kill $(sudo lsof -t -i:27017)"
    ssh $MONGO rm -rf /tmp/mongodb-27017.sock
    ssh $MONGO rm -f /var/lib/mongo/mongod.lock
    ssh $MONGO rm -f /var/run/mongodb/mongod.pid
    ssh $MONGO mkdir -p  /var/run/mongodb/
    ssh $MONGO touch /var/run/mongodb/mongod.pid
    ssh $MONGO chown -R  mongod:mongod /var/run/mongodb/
    ssh $MONGO chown mongod:mongod /var/run/mongodb/mongod.pid
}

function setup_mongo() {
    ssh $MONGO "sed -i -e 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/g'" \
               "/etc/mongod.conf"
    if ! ssh $MONGO "systemctl status mongod"; then
        reset_mongo
        ssh $MONGO "sudo systemctl start mongod"
    fi
}

function cleanup_mongo() {
    ssh $MONGO "mongo --quiet --eval 'var dbs = db.getMongo().getDBNames();"\
               "for(var i in dbs) { db = db.getMongo().getDB(dbs[i]);" \
               "db.dropDatabase(); }'"
    ssh $MONGO "systemctl stop mongod"
}

function setup_tree() {
    # $1: OPTIONS
    # $2: NEED_TO_SYNC
    # $3: ROOT
    # $4: BACKEND
    # $5: MONGO DB NAME
    ./generate_tree $1
    if [[ "$2" == "true" ]]; then
        module load mpi/openmpi-x86_64
        time mpirun --allow-run-as-root -np 128 rbh-sync \
             rbh:$4-mpi:$3 rbh:mongo:$5
        mongo --quiet --host $MONGO $5 --eval "db.entries.count()"
    fi
}

function cleanup_tree() {
    # $1: ROOT
    module load mpi/openmpi-x86_64
    for i in $(seq 0 $(($NB_MDT - 1))); do
        mpirun --allow-run-as-root drm -q $1/mdt$i/
        if [[ $FS == "lustre" ]]; then
            lfs mkdir -m $i $1/mdt$i
        fi
    done
}

function sync() {
    echo "sync"
}

function _find() {
    echo "find"
}

function fsevents() {
    echo "fsevents"
}

NB_MDT=1
FS="posix"
MONGO="$(hostname -s)"
MDS="$(hostname -s)"
CLIENT="$(hostname -s)"
INODES=1000

function usage() {
    echo "bench.sh [--fs FS_TYPE] [--mongo HOSTNAME] [--mds HOSTNAME[,HOSTNAME...]] [--client HOSTNAME] [--inodes NUM] BENCHMARK"
    echo ""
    echo "Run a Robinhood benchmark with the specified options."
    echo ""
    echo "Positional Argument:"
    echo "BENCHMARK"
    echo "The benchmark to run. Valid options: sync, find, fsevents."
    echo ""
    echo "Optional Arguments:"
    echo "--fs FS_TYPE : Filesystem type to use: lustre or posix. Default: posix."
    echo "--mongo HOSTNAME : Hostname of the MongoDB server. Default: localhost."
    echo "--mds HOSTNAME[,HOSTNAME...] : Comma-separated list of Metadata Server (MDS) hostnames. Only with Lustre."
    echo "--client HOSTNAME : Hostname where Robinhood should be launched."
    echo "--inodes NUM : Number of inodes to create. Default: 1000."
}

ARGUMENT_LIST=(
    "fs"
    "mongo"
    "mds"
    "client"
    "inodes"
)

opts=$(getopt \
    --longoptions "$(printf "%s:," "${ARGUMENT_LIST[@]}")help" \
    --name "$(basename "$0")" \
    --options "" \
    -- "$@"
)

eval set --$opts

while [[ $# -gt 0 ]]; do
    case "$1" in
        --fs)
            FS=$2
            shift 2
            ;;

        --mongo)
            MONGO=$2
            shift 2
            ;;

        --mds)
            IFS=',' read -r -a MDS <<< "$2"
            NB_MDT=${#MDS[@]}
            shift 2
            ;;

        --client)
            CLIENT=$2
            shift 2
            ;;

        --help)
            usage
            exit
            ;;

        --inodes)
            INODES=$2
            shift 2
            ;;

        *)
            break
            ;;
    esac
done

shift 1
COMMAND=$1

case "$COMMAND" in
    sync)
        sync
        ;;

    find)
        _find
        ;;

    fsevents)
        if [[ $FS == "posix" ]]; then
            echo "Can only be used with Lustre, got $FS"
            exit
        fi
        fsevents
        ;;

    *)
        usage
        exit
        ;;
esac
