/* This file is part of RobinHood 4
 * Copyright (C) 2025 Commissariat a l'energie atomique et aux energies
 *                    alternatives
 *
 * SPDX-License-Identifer: LGPL-3.0-or-later
 */

#ifndef ROBINHOOD_POSIX_BACKEND_H
#define ROBINHOOD_POSIX_BACKEND_H

#include "robinhood/plugins/backend.h"
#include "robinhood/backend.h"
#include "robinhood/filter.h"
#include "robinhood/fsentry.h"
#include "robinhood/config.h"

#define RBH_POSIX_BACKEND_NAME "posix"

#mesondefine RBH_POSIX_BACKEND_MAJOR
#mesondefine RBH_POSIX_BACKEND_MINOR
#mesondefine RBH_POSIX_BACKEND_RELEASE
#define RBH_POSIX_BACKEND_VERSION RPV(RBH_POSIX_BACKEND_MAJOR, \
                                      RBH_POSIX_BACKEND_MINOR, \
                                      RBH_POSIX_BACKEND_RELEASE)

/**
 * Create a posix backend
 *
 * @param self      the posix plugin
 * @param type      the name used to load the backend, look for extra config
 *                  options under the key backends/<type> if not NULL
 * @param path      a path to the root fsentry
 * @param config    the config to use in the new backend
 *
 * @return          a pointer to a newly allocated posix backend on success,
 *                  NULL on error and errno is set appropriately
 *
 * @error ENOMEM    there was not enough memory available
 */
struct rbh_backend *
rbh_posix_backend_new(const struct rbh_backend_plugin *self,
                      const char *type,
                      const char *path,
                      struct rbh_config *config);

/**
 * Release the memory associated with the plugin
 */
void
rbh_posix_plugin_destroy();

enum rbh_posix_backend_option {
    RBH_PBO_STATX_SYNC_TYPE = RBH_BO_FIRST(RBH_BI_POSIX),
};

#endif
