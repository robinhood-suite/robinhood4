/* This file is part of RobinHood 4
 * Copyright (C) 2025 Commissariat a l'energie atomique et aux energies
 *                    alternatives
 *
 * SPDX-License-Identifer: LGPL-3.0-or-later
 */

#ifndef ROBINHOOD_POSIX_BACKEND_H
#define ROBINHOOD_POSIX_BACKEND_H

#include "robinhood/plugins/backend.h"
#include "robinhood/backend.h"
#include "robinhood/filter.h"
#include "robinhood/fsentry.h"
#include "robinhood/config.h"

#define RBH_POSIX_BACKEND_NAME "posix"

#mesondefine RBH_POSIX_BACKEND_MAJOR
#mesondefine RBH_POSIX_BACKEND_MINOR
#mesondefine RBH_POSIX_BACKEND_RELEASE
#define RBH_POSIX_BACKEND_VERSION RPV(RBH_POSIX_BACKEND_MAJOR, \
                                      RBH_POSIX_BACKEND_MINOR, \
                                      RBH_POSIX_BACKEND_RELEASE)

/**
 * Create a posix backend
 *
 * @param self      the posix plugin
 * @param type      the name used to load the backend, look for extra config
 *                  options under the key backends/<type> if not NULL
 * @param path      a path to the root fsentry
 * @param config    the config to use in the new backend
 *
 * @return          a pointer to a newly allocated posix backend on success,
 *                  NULL on error and errno is set appropriately
 *
 * @error ENOMEM    there was not enough memory available
 */
struct rbh_backend *
rbh_posix_backend_new(const struct rbh_backend_plugin *self,
                      const char *type,
                      const char *path,
                      struct rbh_config *config);

/**
 * Check the given token corresponds to a predicate or action known by POSIX
 *
 * @param token   a string that represents a token POSIX should identify
 *
 * @return        RBH_TOKEN_PREDICATE if the token is a predicate
 *                RBH_TOKEN_ACTION if the token is an action
 *                RBH_TOKEN_UNKNOWN if the token is not valid
 *                RBH_TOKEN_ERROR if an error occur and errno is set
 *                appropriately
 */
enum rbh_parser_token
rbh_posix_check_valid_token(const char *token);

/**
 * Create a filter from the given command line arguments and position in that
 * command line
 *
 * @param argv           the list of arguments given to the command
 * @param argc           the number of strings in \p argv
 * @param index          the argument currently being parsed, should be updated
 *                       if necessary to skip optionnal values
 * @param need_prefetch  boolean value set by posix to indicate if a filter
 *                       needs to be completed
 *
 * @return               a pointer to newly allocated struct rbh_filter on
 *                       success, NULL on error and errno is set appropriately
 */
struct rbh_filter *
rbh_posix_build_filter(const char **argv, int argc, int *index,
                       bool *need_prefetch);

/**
 * Fill information about an entry according to a given directive into a buffer
 *
 * @param output         an array in which the information can be printed
 *                       according to \p directive. Size of the array should be
 *                       \p max_length
 * @param max_length     size of the \p output array
 * @param fsentry        fsentry to print
 * @param directive      which information about \p fsentry to print
 * @param backend        the backend to print (XXX: may not be necessary)
 *
 * @return               the number of characters written to \p output, -1 on
 *                       error
 */
int
rbh_posix_fill_entry_info(char *output, int max_length,
                          const struct rbh_fsentry *fsentry,
                          const char *directive, const char *backend);

/**
 * Delete an entry from the plugin
 *
 * @param fsentry        the entry to delete
 *
 * @return               0 on success, -1 on error and errno is set
 */
int
rbh_posix_delete_entry(struct rbh_fsentry *fsentry);

/**
 * Release the memory associated with the plugin
 */
void
rbh_posix_plugin_destroy();

enum rbh_posix_backend_option {
    RBH_PBO_STATX_SYNC_TYPE = RBH_BO_FIRST(RBH_BI_POSIX),
};

#endif
