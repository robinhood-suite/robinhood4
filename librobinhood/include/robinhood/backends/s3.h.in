/* This file is part of RobinHood 4
 * Copyright (C) 2025 Commissariat a l'energie atomique et aux energies
 *                    alternatives
 *
 * SPDX-License-Identifer: LGPL-3.0-or-later
 */

#ifndef ROBINHOOD_S3_BACKEND_H
#define ROBINHOOD_S3_BACKEND_H

#include "robinhood/plugins/backend.h"
#include "robinhood/backend.h"
#include "robinhood/config.h"

#define RBH_S3_BACKEND_NAME "s3"

#mesondefine RBH_S3_BACKEND_MAJOR
#mesondefine RBH_S3_BACKEND_MINOR
#mesondefine RBH_S3_BACKEND_RELEASE
#define RBH_S3_BACKEND_VERSION RPV(RBH_S3_BACKEND_MAJOR, \
                                   RBH_S3_BACKEND_MINOR, \
                                   RBH_S3_BACKEND_RELEASE)

struct item_data {
    int64_t length;
    int64_t current_id;
    char **list;
};

struct s3_iterator {
    struct rbh_mut_iterator iterator;
    struct rbh_sstack *values;
    struct item_data bkt_data;
    struct item_data obj_data;
};

/**
 * Create a s3 backend
 *
 * @param self      the s3 plugin
 * @param uri       the URI given to the command
 * @param config    the config to use in the new backend
 *
 * @return          a pointer to a newly allocated s3 backend on
 *                  success, NULL on error and errno is set appropriately
 *
 * @error ENOMEM    there was not enough memory available
 */
struct rbh_backend *
rbh_s3_backend_new(__attribute__((unused))
                   const struct rbh_backend_plugin *self,
                   const struct rbh_uri *uri,
                   struct rbh_config *config,
                   bool read_only);

/**
 * Check the given token corresponds to a predicate or action known by s3
 *
 * @param token   a string that represents a token s3 should identify
 *
 * @return        RBH_TOKEN_PREDICATE if the token is a predicate
 *                RBH_TOKEN_ACTION if the token is an action
 *                RBH_TOKEN_UNKNOWN if the token is not valid
 *                RBH_TOKEN_ERROR if an error occur and errno is set
 *                appropriately
 */
enum rbh_parser_token
rbh_mpi_file_check_valid_token(const char *token);

/**
 * Release the memory associated with the plugin
 */
void
rbh_s3_plugin_destroy();

/**
 * Release the memory associated with the iterator
 */
void
s3_iter_destroy(void *iterator);

#endif
