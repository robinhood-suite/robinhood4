/* This file is part of RobinHood 4
 * Copyright (C) 2022 Commissariat a l'energie atomique et aux energies
 *                    alternatives
 *
 * SPDX-License-Identifer: LGPL-3.0-or-later
 */

#ifndef ROBINHOOD_LUSTRE_BACKEND_H
#define ROBINHOOD_LUSTRE_BACKEND_H

#include "robinhood/plugins/backend.h"
#include "robinhood/backend.h"
#include "robinhood/config.h"

#define RBH_LUSTRE_BACKEND_NAME "lustre"

#mesondefine RBH_LUSTRE_BACKEND_MAJOR
#mesondefine RBH_LUSTRE_BACKEND_MINOR
#mesondefine RBH_LUSTRE_BACKEND_RELEASE
#define RBH_LUSTRE_BACKEND_VERSION RPV(RBH_LUSTRE_BACKEND_MAJOR, \
                                       RBH_LUSTRE_BACKEND_MINOR, \
                                       RBH_LUSTRE_BACKEND_RELEASE)

static inline bool rbh_attr_is_lustre(uint64_t flags)
{
    return RBH_ATTR_BACKEND(flags) == RBH_BI_LUSTRE;
}

enum rbh_lustre_enrich_flags {
    RBH_LEF_LUSTRE         = RBH_ATTR_BACKEND_VALUE(LUSTRE),
    RBH_LEF_ALL            = 0x1f,
    RBH_LEF_DIR_LOV        = 0x01,
    RBH_LEF_FID            = 0x02,
    RBH_LEF_STRIPE_COUNT   = 0x04,
    RBH_LEF_STRIPE_SIZE    = 0x08,
    RBH_LEF_STRIPE_PATTERN = 0x10,
    RBH_LEF_ALL_NOFID      = (RBH_LEF_ALL & ~RBH_LEF_FID),
};


/**
 * Create a lustre backend
 *
 * @param self      the lustre plugin
 * @param type      the name used to load the backend (unused)
 * @param path      a path to the root fsentry
 * @param config    the config to use in the new backend
 *
 * @return          a pointer to a newly allocated lustre backend on success,
 *                  NULL on error and errno is set appropriately
 *
 * @error ENOMEM    there was not enough memory available
 */
struct rbh_backend *
rbh_lustre_backend_new(const struct rbh_backend_plugin *self,
                       const char *type,
                       const char *path,
                       struct rbh_config *config);

/**
 * Release the memory associated with the plugin
 */
void
rbh_lustre_plugin_destroy();

#endif
