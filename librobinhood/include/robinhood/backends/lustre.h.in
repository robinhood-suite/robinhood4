/* This file is part of RobinHood 4
 * Copyright (C) 2025 Commissariat a l'energie atomique et aux energies
 *                    alternatives
 *
 * SPDX-License-Identifer: LGPL-3.0-or-later
 */

#ifndef ROBINHOOD_LUSTRE_BACKEND_H
#define ROBINHOOD_LUSTRE_BACKEND_H

#include "robinhood/backend.h"
#include "robinhood/config.h"

#define RBH_LUSTRE_BACKEND_NAME "lustre"

#mesondefine RBH_LUSTRE_BACKEND_MAJOR
#mesondefine RBH_LUSTRE_BACKEND_MINOR
#mesondefine RBH_LUSTRE_BACKEND_RELEASE
#define RBH_LUSTRE_BACKEND_VERSION RPV(RBH_LUSTRE_BACKEND_MAJOR, \
                                       RBH_LUSTRE_BACKEND_MINOR, \
                                       RBH_LUSTRE_BACKEND_RELEASE)

/**
 * Create a lustre backend
 *
 * @param path      a path to the root fsentry
 * @param config    the config to use in the new backend
 *
 * @return          a pointer to a newly allocated lustre backend on success,
 *                  NULL on error and errno is set appropriately
 *
 * @error ENOMEM    there was not enough memory available
 */
struct rbh_backend *
rbh_lustre_backend_new(const char *path, struct rbh_config *config);

/**
 * Check the given token is a valid Lustre action or predicate
 *
 * @param token     the token to check
 *
 * @return          RBH_TOKEN_ACTION if the token is a Lustre action
 *                  RBH_TOKEN_PREDICATE if the token is a Lustre predicate
 *                  RBH_TOKEN_UNKNOWN if the token is not a Lustre token
 *                  RBH_TOKEN_ERROR otherwise
 */
enum rbh_parser_token
rbh_lustre_check_valid_token(const char *token);

/**
 * Build a filter based on the given predicate at argv[*index] and increase
 * index if the predicate requires an argument.
 *
 * @param argv           the list of arguments given to the command
 * @param argc           the number of strings in \p argv
 * @param index          the argument currently being parsed, should be updated
 *                       if necessary to skip optionnal values
 * @param need_prefetch  boolean value set by posix to indicate if a filter
 *                       needs to be completed
 *
 * This function will exit if \p string is not a valid predicate
 */
struct rbh_filter *
rbh_lustre_build_filter(const char **argv, int argc, int *index,
                        bool *need_prefetch);

/**
 * Release the memory associated with the plugin
 */
void
rbh_lustre_plugin_destroy();

#endif
